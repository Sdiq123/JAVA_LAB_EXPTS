package threadDemo;
class Thread1 extends Thread {
    @Override
    public void run() {
        for (int i = 1; i <= 5; i++) {
            try {
                System.out.println("Thread1: " + i);
                Thread.sleep(2000); // Sleep for 2 seconds
            } catch (InterruptedException e) {
                System.out.println("Thread1 interrupted.");
            }
        }
    }
}

class Thread2 extends Thread {
    @Override
    public void run() {
        for (int i = 10; i <= 15; i++) {
            try {
                System.out.println("Thread2: " + i);
                Thread.sleep(2000); // Sleep for 2 seconds
            } catch (InterruptedException e) {
                System.out.println("Thread2 interrupted.");
            }
        }
    }
}

public class ThreadLifecycle{
    public static void main(String[] args) {
        Thread1 t1 = new Thread1();
        Thread2 t2 = new Thread2();
        
        
        t1.start();
        t2.start();
        
        /*while (t1.isAlive()||t2.isAlive()) {
        	System.out.println("Thread1 is alive:"+t1.isAlive());
        	System.out.println("Thread2 is alive:"+t2.isAlive());
        	
        	try {
        		Thread.sleep(1000);
        	}catch (InterruptedException e) {
        		System.out.println("Main Thread Interrupted");
        	}
        }*/
        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Both threads have finished execution.");
    }
}


